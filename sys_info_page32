#!/bin/bash

# sys_info_32: program to output a system information page

PROGNAME=$(basename $0)
TITLE="System Information Report For $HOSTNAME"
CURRENT_TIME=$(date +"%x %r %Z")
TIMESTAMP="Generated $CURRENT_TIME, by $USER"

report_uptime () {
	cat <<- _EOF_
		<H2>System Uptime</H2>
		<PRE>$(uptime)</PRE>
		_EOF_
	return
}

report_disk_space () {
	cat <<- _EOF_
		<H2>Disk Space Utilization</H2>
		<PRE>$(df -h)</PRE>
		_EOF_
	return
}

report_home_space () {
   if [[ $(id -u) -eq 0 ]]; then 
			cat <<- _EOF_
				<H2>Home Space Utilization(All Users)</H2>
				<PRE>$(du -sh /home/*))</PRE>
				_EOF_
 	else
			cat <<- _EOF_
				<H2>Home Space Utilization</H2>
				<PRE>$(du -sh $HOME))</PRE>
				_EOF_
	fi
	return
}

usage () {
	echo "$PRPGRAME: usage: $PROGRAME [ -f file | -i] "
	return
}

write_html_page () {
	cat <<- _EOF_
	<HTML>
		<HEAD>
			<TITLE>$TITLE</TITLE>
		</HEAD>
		<BODY>
			<H1>$TITLE</H1>
			,P>$TIMESTAMP</P>
			$(report_uptime)
			$(report_disk_space)
			$(report_home_space)
		</BODY>
 	</HTML>
	_EOF_
	return
}

# process command line options

interactive=
filename=

while [[ -n $1 ]]; do
	case $1 in 
		-f | --file)				shift          #if $1 is -f then shift will make the value of $1 is the second arument that is file name
									filename=$1
									;;
		-i | --interactive) 		interactive=1
									;;
		-h | --help)				usage
									exit
									;;
		*)							usage >&2
									exit 1
									;;
	esac
	shift
done

# interactive mode

if [[ -n $interactive ]]; then          #if interactive is not empty then it just promt the user that if the file exist, he want to overwite by clicking y, to quit q, and to continue the loop to see the prompt again n
	while true; do
		read -p "Enter name of output file: " filename
		if [[ -e $filename ]]; then     #if file exits in the current location then only it will run
			read -p "'$filename' exists. Overwrite? [y/n/q] > "
			case $REPLY in 
				y|Y) 	break            #break out the loop and run the "output html page"
						;;
				Q|q)	echo "Program terminated."  #exit the whole script
						exit
						;;
				*)		continue     #continue the loop again
						;;
			esac
		fi
		if [[ -n $filename ]];then  #if filename is not empty
			break
		fi
	done
fi

# output html page

if [[ -n $filename ]]; then
		if touch $filename && [[ -f $filename ]]; then        #using touch(to check file has writable permission) and file is a regualar file not a directory
			write_html_page > $filename                       #overwrite the file if exits or if not create new file, here problem when fiel that doesn't exits how this if could run, resulting in makeing a new file 
		else
			echo "$PROGRAME : Cannot write file '$filename'" >&2
			exit 1
		fi
else
		write_html_page    #if $filename is empty, output to prompt
fi

# if if_else combined its certain that only one will run
# bash scripting supports options =>as in case -f is used as option NOT as pattern, it its a pattern then could have used pattern matching or regrex match 
# when ever exits runs  it throw out of whole script
# break and continue only works inside functions
# exit and return used through out the script including functions

